program -> decls stmts |
    program -> {
        offset = 0;
    } decls stmts

decls -> decls' |

stmts -> stmts' |

block -> <LBR> decls stmts <RBR> |

decl -> type <Variable> <SEM> |def |defrec |
   decl -> type <Variable> <SEM>  {
       if(<Variable>.name is exist) then error;
       enter (<Variable>.name , type.Type , offset);
       offset += type.width;
   }

type -> basic type' |
    type -> basic type' {
        t = basic.Type;
        w = basic.width;
    }
def -> <FUNC> <Variable> <LPA> <RPA> block |



defrec -> <RECORD> <Variable> <SEM> |

cal -> <CALL> <Variable> <LPA> <RPA> |


basic -> <INT> |<CHAR> |<LF> |<F> |
    basic -> <INT> {
        basic.Type = int
    }
    basic -> <CHAR> {
        basic.Type = char
    }
    basic -> <F> {
        basic.Type = float
    }
    basic -> <LF> {
        basic.Type = double
    }
stmt -> <CALL> <Variable> <LPA> <RPA> <SEM> |loc <ASS> bool <SEM> |<IF> <LPA> bool <RPA> noelse stmt1 |<WHL> <LPA> bool <RPA> stmt |<DO> stmt <WHL> <LPA> bool <RPA> <SEM> |<BRK> <SEM> |<LBR> decls stmts <RBR> |
    stmt -> loc <ASS> bool <SEM> {
        p = lookup(loc);
        if(p == nil) then error ;
        stmt.code = bool.code || gen(p.addr "=" bool.addr);
    }
noelse -> <CALL> <Variable> <LPA> <RPA> <SEM> |loc <ASS> bool <SEM> |<IF> <LPA> bool <RPA> noelse |<WHL> <LPA> bool <RPA> noelse |<DO> stmt <WHL> <LPA> bool <RPA> <SEM> |<BRK> <SEM> |<LBR> decls stmts <RBR> |
    noelse -> loc <ASS> bool <SEM> {
        p = lookup(loc);
        if(p == nil) then error ;
        noelse.code = bool.code || gen(p.addr "=" bool.addr);
    }
loc -> <Variable> loc' |
    loc -> <Variable> loc' {
        loc.array = lookup(<Variable>.name);
        if(loc.array == nil) then error;
        loc.Type = loc.array.type.elem;
        loc.offset = newtemp();
        w = loc.Type.width;
        gen(loc.offset '=' loc'.offset '*' w)
    }
bool -> join bool' |
join -> equality join' |
equality -> rel equality' |
rel -> expr rel4 | 
    rel -> expr rel4 {

    }
expr -> term expr' |
    expr -> term expr' {
        expr.addr = newtemp();
        expr.code = term.code || expr'.code || gen(expr.add '=' term.add expr'.op expr.addr);
    }
term -> unary term' |
    term -> unary term' {
        term.addr = newtemp();
        term.code = unary.code || term'.code || gen(term.addr = unary.addr term'.op term'.addr);
    }
unary -> <NOT> unary |<SUB> unary |factor |
    unary -> <NOT> unary1 {
        unary.addr = newtemp();
        unary.code = unary1.code || gen(unary.addr '=' '!' unary1.addr);
    }
    unary -> <SUB> unary1 {
        unary.addr = newtemp();
        unary.code = unary1.code || gen(unary.addr '=' '-' unary1.addr);
    }
    unary -> factor {
        unary.addr = newtemp();
        unary.code = factor.code || gen(unary.addr '=' factor.code);
    }
factor -> <LPA> bool <RPA> |<Variable> loc' |<Const> |<TRUE> |<FALSE> | 
    factor -> <LPA> bool <RPA> {
        factor.addr = bool.addr;
        factor.code = bool.code;
    }
    factor -> <Variable> loc' {
        array = lookup(<Variable>.name);
        if(array == nil) then error;
        Type = loc.array.type.elem;
        addr = newtemp();
        w = Type.width;
        factor.code = gen(addr '=' loc'.addr '*' w)
        factor.addr = addr;
    }
    factor -> <Const> {
        factor.addr = newtemp();
        factor.code = gen(factor.addr '=' <Const>.val);
    }
    factor -> <TRUE> {
        factor.addr = newtemp();
        factor.code = gen(factor.addr '=' <Const>.val);
    }
    factor -> <FALSE> {
        factor.addr = newtemp();
        factor.code = gen(factor.addr '=' <FALSE>.val);
    }

decls' -> <INT> type' <Variable> <SEM> decls' |<CHAR> type' <Variable> <SEM> decls' |<LF> type' <Variable> <SEM> decls' |<F> type' <Variable> <SEM> decls' |<FUNC> <Variable> <LPA> <RPA> block decls' |<RECORD> <Variable> <SEM> decls' ||
stmts' -> <CALL> <Variable> <LPA> <RPA> <SEM> stmts' |<Variable> loc' <ASS> bool <SEM> stmts' |<IF> <LPA> bool <RPA> noelse stmts'5 |<WHL> <LPA> bool <RPA> stmt stmts' |<DO> stmt <WHL> <LPA> bool <RPA> <SEM> stmts' |<BRK> <SEM> stmts' |<LBR> decls stmts <RBR> stmts' ||
type' -> <LAT> <Const> <RAT> type' ||
    type' -> <LAT> <Const> <RAT> type'1 {
        if(<Const> != INT) then error
        type'.Type = array(<Const>,type'1.Type)
        type'.Width = type'1.Width * <Const>.val
    }
    type' -> || {
        type'.Type = t;
        type'.width = w;
    }

loc' -> <LAT> bool <RAT> loc' ||
    loc' -> <LAT> bool <RAT> loc'1 {
        loc'.offset = newtemp();
        if(loc'1.offset == 0)then
            gen(loc'.offset '=' bool.addr '*' w)
        else then
            gen(loc'.offset '=' loc'1.offset '*' bool.addr)
    }
    loc' -> || {
        loc'.offset = 0;
    }
bool' -> <OR> join bool' ||
join' -> <AND> equality join' ||

equality' -> <EQU> rel equality' |<NOTE> rel equality' ||

expr' -> <INC> term expr' |<SUB> term expr' ||
    expr' -> <INC> term expr'1 {
        expr'.addr = newtemp();
        expr'.code = term.code || expr'.code || gen(expr'.addr '=' term.addr expr'1.op expr'1.addr);
        expr'.op = '+';
    }

    expr' -> <SUB> term expr'1 {
        expr'addr = newtemp();
        expr'.code = term.code || expr'.code || gen(expr'.addr '=' term.addr expr'1.op expr'1.addr);
        expr'.op = '-';
    }

term' -> <MUL> unary term' |<DIV> unary term' ||
    term' -> <MUL> unary term'1 {
        term'.addr = newtemp();
        term'.code = unary.code || term'1.code || gen(term'.addr '=' unary.addr term'1.op term'1.addr);
        term'.op = '*';
    }
    term' -> <DIV> unary term'1 {
        term'.addr = newtemp();
        term'.code = unary.code || term'1.code || gen(term'.addr '=' unary.addr term'1.op term'1.addr);
        term'.op = '/';
    }
    
stmt1 -> |<ELSE> noelse |

rel2 -> <L> expr |<LE> expr |<G> expr |
    rel2 -> <L> expr {
        rel2.addr = newtemp();
        rel2.code = expr.code || gen(rel2.addr '=' expr.addr);
        rel2.op = '<';
    }
    rel2 -> <LE> expr {
        rel2.addr = newtemp();
        rel2.code = expr.code || gen(rel2.addr '=' expr.addr);
        rel2.op = '<=';
    }
    rel2 -> <G> expr {
        rel2.addr = newtemp();
        rel2.code = expr.code || gen(rel2.addr '=' expr.addr);
        rel2.op = '>';
    }

rel3 -> rel2 |<GE> expr |
    rel3 -> rel2 {
        rel3.addr = newtemp();
        rel3.code = rel2.code;
        rel3.op = rel2.op;
    }
    rel3 -> <GE> expr {
        rel3.addr = newtemp();
        rel3.code = expr.code || gen(rel3.addr '=' expr.addr);
        rel3.op = '>='
    }


rel4 -> rel3 ||
    rel4 -> rel3 {
        rel4.addr = newtemp();
        rel4.empty = false;
    }
    rel4 -> || {
        rel4.empty = newtemp();
        rel4.empty = true;
    }
stmts'5 -> stmts' |<ELSE> noelse stmts' |